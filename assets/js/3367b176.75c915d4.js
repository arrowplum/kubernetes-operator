"use strict";(self.webpackChunkwebsite_operator=self.webpackChunkwebsite_operator||[]).push([[5028],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=s,k=m["".concat(o,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:s,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9701:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=n(7462),s=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"Multiple Aerospike Clusters",description:"Multiple Aerospike Clusters"},o=void 0,p={unversionedId:"Multiple-Aerospike-clusters",id:"version-1.x.x/Multiple-Aerospike-clusters",isDocsHomePage:!1,title:"Multiple Aerospike Clusters",description:"Multiple Aerospike Clusters",source:"@site/versioned_docs/version-1.x.x/Multiple-Aerospike-clusters.md",sourceDirName:".",slug:"/Multiple-Aerospike-clusters",permalink:"/kubernetes-operator/Multiple-Aerospike-clusters",editUrl:"https://github.com/aerospike/kubernetes-operator/edit/main/versioned_docs/version-1.x.x/Multiple-Aerospike-clusters.md",tags:[],version:"1.x.x",frontMatter:{title:"Multiple Aerospike Clusters",description:"Multiple Aerospike Clusters"},sidebar:"version-1.x.x/docsSidebar",previous:{title:"Rack Awareness",permalink:"/kubernetes-operator/Rack-Awareness"},next:{title:"Monitoring",permalink:"/kubernetes-operator/Monitoring"}},c=[{value:"Multiple Aerospike clusters in a single k8s namespace",id:"multiple-aerospike-clusters-in-a-single-k8s-namespace",children:[]},{value:"Multiple Aerospike clusters in multiple k8s namespaces",id:"multiple-aerospike-clusters-in-multiple-k8s-namespaces",children:[{value:"Step 1",id:"step-1",children:[]},{value:"Step 2",id:"step-2",children:[]},{value:"Step 3",id:"step-3",children:[]}]},{value:"XDR setup using Multicluster feature",id:"xdr-setup-using-multicluster-feature",children:[]}],u={toc:c};function m(e){var t=e.components,n=(0,s.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The operator is able to deploy multiple Aerospike clusters within a single k8s namespace or in multiple k8s namespaces. The operator can watch all the namespaces specified in its yaml file and reconcile clusters deployed in them."),(0,a.kt)("h2",{id:"multiple-aerospike-clusters-in-a-single-k8s-namespace"},"Multiple Aerospike clusters in a single k8s namespace"),(0,a.kt)("p",null,"Deploying multiple clusters in a single namespace is as easy as deploying a single cluster. The user has to just deploy another cluster with a cluster name (cluster object metadata name in cr.yaml file) that is not already registered in that namespace."),(0,a.kt)("h2",{id:"multiple-aerospike-clusters-in-multiple-k8s-namespaces"},"Multiple Aerospike clusters in multiple k8s namespaces"),(0,a.kt)("p",null,"Deploying multiple clusters in multiple namespaces require few steps to be followed"),(0,a.kt)("h3",{id:"step-1"},"Step 1"),(0,a.kt)("p",null,"Add a list of namespaces to be watched by Operator in ",(0,a.kt)("inlineCode",{parentName:"p"},"operator.yaml")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: aerospike-kubernetes-operator\n  namespace: aerospike\nspec:\n    .\n    .\n    spec:\n      containers:\n        .\n        .\n        - name: aerospike-kubernetes-operator\n          env:\n          - name: WATCH_NAMESPACE\n            # Use below value for watching multiple namespaces by the operator\n            value: aerospike,aerospike1,aerospike2\n")),(0,a.kt)("h3",{id:"step-2"},"Step 2"),(0,a.kt)("p",null,"Add a new Service account and a new entry for this Service account in ClusterRoleBinding for every namespace to be watched in ",(0,a.kt)("inlineCode",{parentName:"p"},"rbac.yaml")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"\n---\n# Service account used by the cluster pods to obtain pod metadata.\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  # Do not change the name, its hard-coded in the operator\n  name: aerospike-cluster\n  namespace: aerospike\n\n# Uncomment below service accounts for deploying clusters in additional namespaces\n---\n# Service account used by the cluster pods to obtain pod metadata.\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  # Do not change name, its hard-coded in operator\n  name: aerospike-cluster\n  namespace: aerospike1\n\n---\n# Role\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: aerospike-cluster\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - nodes\n  - services\n  verbs:\n  - get\n  - list\n- apiGroups:\n  - aerospike.com\n  resources:\n  - '*'\n  verbs:\n  - '*'\n\n---\n# RoleBinding\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: aerospike-cluster\nroleRef:\n  kind: ClusterRole\n  name: aerospike-cluster\n  apiGroup: rbac.authorization.k8s.io\nsubjects:\n- kind: ServiceAccount\n  name: aerospike-cluster\n  namespace: aerospike\n- kind: ServiceAccount\n  name: aerospike-cluster\n  namespace: aerospike1\n\n")),(0,a.kt)("h3",{id:"step-3"},"Step 3"),(0,a.kt)("p",null,"Now deploy a new cluster in any of the watched namespaces using a ",(0,a.kt)("inlineCode",{parentName:"p"},"cr.yaml")," file."),(0,a.kt)("h2",{id:"xdr-setup-using-multicluster-feature"},"XDR setup using Multicluster feature"),(0,a.kt)("p",null,"Deploy XDR destination cluster using this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/aerospike/aerospike-kubernetes-operator/tree/1.0.1/deploy/samples/xdr_dst_cluster_cr.yaml"},"cr.yaml"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f deploy/samples/xdr_dst_cluster_cr.yaml\n")),(0,a.kt)("p",null,"Deploy XDR source cluster using this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/aerospike/aerospike-kubernetes-operator/tree/1.0.1/deploy/samples/xdr_src_cluster_cr.yaml"},"cr.yaml"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f deploy/samples/xdr_src_cluster_cr.yaml\n")),(0,a.kt)("p",null,"Here Source and Destination clusters are deployed in a single namespace. If the user wants to deploy these clusters in different namespaces then the user has to follow ",(0,a.kt)("a",{parentName:"p",href:"/kubernetes-operator/Multiple-Aerospike-clusters#multiple-aerospike-clusters-in-multiple-k8s-namespaces"},"these")," steps."))}m.isMDXComponent=!0}}]);